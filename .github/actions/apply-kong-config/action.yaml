name: "Build Config"
description: "Composite action to deploy the Kong API configuration"
inputs:
  environment:
    description: "Environment to deploy to"
    required: true
  api_folder:
    description: "Path to the API folder"
    required: true
  konnect_token:
    description: "Kong Konnect token"
    required: true
  client_id:
    description: "OIDC Client ID"
    required: true
  client_secret:
    description: "OIDC Client Secret"
    required: true

runs:
  using: "composite"
  steps:
  
    - uses: kong/setup-deck@v1
      with:
        version: latest

    - uses: kong/setup-inso@v2
      with:
        inso-version: 11.0.2

    - name: Source environment variables
      id: source-env
      shell: bash
      run: |
        echo "::group::Sourcing environment variable files"

        files=(
          "${{ github.action_path }}/env/common.sh"
          "${{ github.action_path }}/env/${{ inputs.environment }}.sh"
        )

        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "Sourcing $file"
            set -a
            source "$file"
            set +a
          else
            echo "No environment file found for $file. Skipping."
          fi
        done

        # Export final values of DECK_ variables to GITHUB_ENV
        while IFS='=' read -r key value; do
          echo "$key=$value" >> "$GITHUB_ENV"
        done < <(env)

        echo "::endgroup::"

    - name: Setup variables
      shell: bash
      run: |
        # Extract the Spec ID from the Insomnia configuration
        SPEC_ID=$(yq eval '.spec.meta.id' "${{ inputs.api_folder }}/insomnia.yaml")
        
        # Define build folder and export the OpenAPI spec
        build_folder="${{ github.workspace }}/.generated"
        mkdir -p "$build_folder"
        inso export spec "$SPEC_ID" -w "${{ inputs.api_folder }}/insomnia.yaml" -o "$build_folder/oas.yaml"
        
        # Extract API metadata from the OpenAPI spec
        api_name=$(yq eval '.info.title' "$build_folder/oas.yaml" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
        api_version=$(yq eval '.info.version' "$build_folder/oas.yaml")
        major_version=$(echo "$api_version" | cut -d '.' -f 1)
        
        # Define additional variables
        team_name="${{ env.TEAM_NAME }}"
        control_plane_name="${team_name}-cp"
        system_account="sa-${control_plane_name}-admin"
        platform_folder="${{ github.action_path }}/platform"
        namespace_path_prefix="/$api_name"
        
        # Export variables to the GitHub environment
        echo "DECK_API_NAME=$api_name" >> $GITHUB_ENV
        echo "DECK_API_VERSION=$api_version" >> $GITHUB_ENV
        echo "DECK_API_MAJOR_VERSION=v$major_version" >> $GITHUB_ENV
        echo "DECK_TEAM_NAME=$team_name" >> $GITHUB_ENV
        echo "DECK_CONFIG_NAMESPACE_PATH_PREFIX=$namespace_path_prefix" >> $GITHUB_ENV
        echo "CONTROL_PLANE_NAME=$control_plane_name" >> $GITHUB_ENV
        echo "SYSTEM_ACCOUNT=$system_account" >> $GITHUB_ENV
        echo "SPEC_ID=$SPEC_ID" >> $GITHUB_ENV
        echo "BUILD_FOLDER=$build_folder" >> $GITHUB_ENV
        echo "PLATFORM_FOLDER=$platform_folder" >> $GITHUB_ENV
        echo "KONNECT_SERVER_URL=https://eu.api.konghq.com" >> $GITHUB_ENV
        echo "API_PLUGINS_FOLDER=${{ inputs.api_folder }}/kong/plugins" >> $GITHUB_ENV
        echo "API_PATCHES_FOLDER=${{ inputs.api_folder }}/kong/patches" >> $GITHUB_ENV

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: config
        path: ${{ env.BUILD_FOLDER }}

    - name: Get Control Plane Backup
      shell: bash
      run: |
        deck gateway dump \
          --yes \
          --with-id \
          --select-tag generated_by:deck \
          --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
          --konnect-token="${{ inputs.konnect_token }}" \
          --konnect-control-plane-name="${{ env.CONTROL_PLANE_NAME }}" -o kong_backup.yaml
      working-directory: ${{ env.BUILD_FOLDER }}

    - name: Sync Config
      id: sync
      shell: bash
      run: |
        deck gateway sync kong.yaml  \
          --select-tag ${{ env.DECK_API_NAME }} \
          --select-tag ${{ env.DECK_API_MAJOR_VERSION }} \
          --select-tag generated_by:deck \
          --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
          --konnect-token="${{ inputs.konnect_token }}" \
          --konnect-control-plane-name="${{ env.CONTROL_PLANE_NAME }}"
      working-directory: ${{ env.BUILD_FOLDER }}
      continue-on-error: true

    # https://github.com/schemathesis/schemathesis
    - name: Run Contract Tests Against the Gateway
      uses: schemathesis/action@v1
      if: steps.sync.outcome == 'success'
      id: tests
      with:
        schema: ${{ env.BUILD_FOLDER }}/oas.yaml
        base-url: ${{ env.GATEWAY_URL }}${{ env.DECK_CONFIG_NAMESPACE_PATH_PREFIX }}
        checks: all
        args: '--auth ${{ inputs.client_id }}:${{ inputs.client_secret }} --experimental openapi-3.1 --method=GET'
      continue-on-error: true

    - name: Rollback Config
      if: steps.tests.outcome == 'failure' || steps.sync.outcome == 'failure'
      shell: bash
      run: |
        echo "Tests failed. Rolling back configuration..."
        deck gateway sync kong_backup.yaml  \
          --select-tag generated_by:deck \
          --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
          --konnect-token="${{ inputs.konnect_token }}" \
          --konnect-control-plane-name="${{ env.CONTROL_PLANE_NAME }}"
      working-directory: ${{ env.BUILD_FOLDER }}

    - name: Get a fresh backup
      if: steps.tests.outcome == 'success' || steps.sync.outcome == 'skipped'
      shell: bash
      run: |
        deck gateway dump \
          --yes \
          --with-id \
          --select-tag generated_by:deck \
          --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
          --konnect-token="${{ inputs.konnect_token }}" \
          --konnect-control-plane-name="${{ env.CONTROL_PLANE_NAME }}" -o kong_backup.yaml
      working-directory: ${{ env.BUILD_FOLDER }}

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts
        path: |
          ${{ env.BUILD_FOLDER }}/kong_backup.yaml
          ${{ env.BUILD_FOLDER }}/kong.yaml