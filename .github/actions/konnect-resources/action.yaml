name: 'Konnect Resources'
description: 'Provision or destroy Konnect resources'
inputs:
  config:
    description: 'Path to the provisioning config file'
    required: true
  action:
    description: 'Action to perform'
    required: true
    default: 'provision'
  vault_addr:
    description: 'Vault address'
    required: false
    default: 'http://localhost:8300'
  vault_token:
    description: 'Vault token'
    required: true
  s3_access_key:
    description: 'S3 access key'
    required: true
  s3_secret_key:
    description: 'S3 secret key'
    required: true
  environment:
    description: 'Environment to provision'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Install MinIO Client
      uses: ./.github/actions/setup-minio-client

    - name: Install vault cli
      uses: ./.github/actions/setup-vault-client

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 'latest'
    
    - name: Source environment variables
      id: source-env
      shell: bash
      run: |
        echo "::group::Sourcing environment variable files"

        files=(
          "${{ github.action_path }}/env/common.sh"
          "${{ github.action_path }}/env/${{ inputs.environment }}.sh"
        )

        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "Sourcing $file"
            set -a
            source "$file"
            set +a
          else
            echo "No environment file found for $file. Skipping."
          fi
        done

        # Export final values of DECK_ variables to GITHUB_ENV
        while IFS='=' read -r key value; do
          echo "$key=$value" >> "$GITHUB_ENV"
        done < <(env)

        echo "::endgroup::"

    - name: Validate config
      run: |
        # Check if the config file exists
        if [ ! -f ${{ inputs.config }} ]; then
          echo "Config file not found: ${{ inputs.config }}"
          exit 1
        fi
      shell: bash


    - name: Set resource variables from config file
      run: |
        RESOURCE_TYPE=$(jq -r '.metadata.type' ${{ inputs.config }})
        RESOURCE_NAME=$(jq -r '.metadata.name' ${{ inputs.config }})
        RESOURCE_PATH=$(echo $RESOURCE_TYPE | tr '.' '/')
        TERRAFORM_DIR=${{ github.action_path }}/terraform/${RESOURCE_PATH}

        echo "RESOURCE_TYPE=$RESOURCE_TYPE" >> $GITHUB_ENV
        echo "RESOURCE_NAME=$RESOURCE_NAME" >> $GITHUB_ENV
        echo "TERRAFORM_DIR=$TERRAFORM_DIR" >> $GITHUB_ENV
      shell: bash

    - name: Import CA Certificate
      id: import-secrets
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ inputs.vault_addr }}
        token: ${{ inputs.vault_token }}
        secrets: |
          pki/cert/ca certificate | TF_VAR_cacert ;

    - name: Create S3 bucket if required
      if: ${{ inputs.action == 'provision' }}
      shell: bash
      run: |
        ./create-minio-bucket.sh konnect $RESOURCE_TYPE.$RESOURCE_NAME
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.s3_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.s3_secret_key }}
        TF_VAR_resources_file: ${{ inputs.config }}
      working-directory: ${{ github.action_path }}/scripts

    - name: Terraform Init
      shell: bash
      run: |
        terraform init -upgrade \
          -backend-config=config.s3.tfbackend \
          -backend-config="bucket=$RESOURCE_TYPE.$RESOURCE_NAME" \
          -backend-config="key=${{ inputs.environment }}.tfstate" \
          -backend-config="region=main" \
          -backend-config="access_key=${{ inputs.s3_access_key }}" \
          -backend-config="secret_key=${{ inputs.s3_secret_key }}"
      env:
        TF_VAR_resources_file: ${{ inputs.config }}
      working-directory: ${{env.TERRAFORM_DIR}}

    - name: Terraform Plan
      shell: bash
      if: ${{ inputs.action == 'provision' }}
      run: |
        terraform plan -out=tfplan
      env:
        TF_VAR_resources_file: ${{ inputs.config }}
      working-directory: ${{env.TERRAFORM_DIR}}

    - name: Terraform Apply
      shell: bash
      if: ${{ inputs.action == 'provision' }}
      id: tfapply
      run: |
        terraform apply -auto-approve tfplan
        echo "$(terraform-bin output -json system_account_access_tokens)" > system_account_tokens.json
      env:
        TF_VAR_resources_file: ${{ inputs.config }}
      working-directory: ${{env.TERRAFORM_DIR}}

    - name: Store System Account tokens in Vault
      shell: bash
      if: ${{ inputs.action == 'provision' }}
      run: |
        for row in $(cat system_account_tokens.json | jq -r '.[] | @base64'); do
          _jq() {
            echo ${row} | base64 --decode | jq -r ${1}
          }

          secret_name=$(_jq '.name')
          secret_value=$(_jq '.token')

          vault kv put secret/system-accounts/${secret_name} token=${secret_value}

          echo "Stored secret ${secret_name} in Vault."
        done
      working-directory: ${{env.TERRAFORM_DIR}}

    - name: Terraform destroy
      shell: bash
      if: ${{ inputs.action == 'destroy' }}
      run: |
        terraform destroy -auto-approve
      env:
        TF_VAR_resources_file: ${{ inputs.config }}
      working-directory: ${{env.TERRAFORM_DIR}}
