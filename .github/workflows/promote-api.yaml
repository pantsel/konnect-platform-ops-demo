name: Promote API

on:
  workflow_dispatch:
    inputs:
      api_folder:
        description: "Path to the api folder"
        required: true
        type: string
      environment:
        description: "Environment to deploy to"
        type: choice
        default: "dev"
        options:
          - "dev"
          - "tst"
          - "acc"
          - "prd"
      control_plane_name:
        description: "Kong Konnect control plane name"
        type: string
        required: true
      system_account:
        description: "The system account to use for authentication with Konnect"
        type: string
        required: true

env:
  ENV_FILE: .github/env/${{ inputs.environment }}.yaml
  API_SPEC: ${{ inputs.api_folder }}/openapi.yaml
  PLATFORM_FOLDER: ${{ github.workspace }}/examples/apiops/platform
  BUILD_FOLDER: ${{ github.workspace }}/examples/apiops/.generated
  DECK_CONFIG_NAMESPACE_PATH_PREFIX: /flight-data
  DECK_CONFIG_OIDC_ISSUER: ${{ secrets.OIDC_ISSUER }} # To be used in the OIDC plugin template

jobs:
  publish-api:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: kong/setup-deck@v1
        with:
          version: latest

      - name: Load environment configuration
        uses: ./.github/actions/load-config
        with:
          environment: ${{ inputs.environment }}

      - name: Import system account Token from Vault
        id: import-token
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ env.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            secret/data/system-accounts/${{ inputs.system_account }} token | SYSTEM_ACCOUNT_TOKEN ;

      - name: Setup decK variables
        run: |

          # Set the API Name
          api_name=$(yq eval '.info.title' ${{ github.workspace }}/$API_SPEC | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
          echo "DECK_API_NAME=$api_name" >> $GITHUB_ENV

          api_version=$(yq eval '.info.version' ${{ github.workspace }}/$API_SPEC)
          echo "DECK_API_VERSION=$api_version" >> $GITHUB_ENV

          # Major version
          major_version=$(echo $api_version | cut -d '.' -f 1)
          echo "DECK_API_MAJOR_VERSION=v$major_version" >> $GITHUB_ENV

      # # This step is only required if you are using OAS Validation plugin
      # - name: Read OAS into an environment variable
      #   id: oas-to-env
      #   run: |
      #     # Read the YAML file and convert to JSON string to be used with the OAS Validation plugin down the line.
      #     # The plugin expects the OAS as a JSON string in an environment variable.
      #     # https://docs.konghq.com/hub/kong-inc/oas-validation/configuration/#config-api_spec
          
      #     oas_json=$(yq eval -o=json ${{ github.workspace }}/${{ inputs.openapi_spec }} | jq -c .)

      #     # Set as env variable
      #     echo "DECK_CONFIG_API_SPEC=${oas_json}" >> $GITHUB_ENV

      - name: Lint OpenAPI Spec
        shell: bash
        run: |
          deck file lint -s $API_SPEC $PLATFORM_FOLDER/openapi.ruleset.yaml

      - name: Convert OpenAPI Specification to Kong Gateway configuration
        run: cat $API_SPEC | deck file openapi2kong > $BUILD_FOLDER/kong.yaml

      - name: Add plugins to Kong Gateway configuration
        run: |
          cat kong.yaml | deck file add-plugins \
            ${{ github.workspace }}/${{ inputs.api_folder }}/kong/plugins.yaml -o kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Apply patches to Kong Gateway configuration
        run: |
          cat kong.yaml | deck file patch \
            ${{ github.workspace }}/${{ inputs.api_folder }}/kong/patches.yaml -o kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Add namespace to Kong Gateway configuration
        run: cat kong.yaml | deck file namespace --path-prefix=$DECK_CONFIG_NAMESPACE_PATH_PREFIX -o kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Apply Platform level patches
        run: |
          cat kong.yaml | deck file patch \
            $PLATFORM_FOLDER/kong/patches/*.yaml -o kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Add Tags
        shell: bash
        run: |
          cat kong.yaml | deck file add-tags $DECK_API_NAME $DECK_API_MAJOR_VERSION -o kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Output Kong Gateway configuration
        run: cat kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Lint Kong Gateway configuration
        run: deck file lint -s kong.yaml ${{ env.PLATFORM_FOLDER }}/kong.ruleset.yaml;
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Validate Generated Kong Gateway configuration
        run: deck file validate kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}
      
      - name: Get a full backup of the Control Plane Configuration
        run: |
          deck gateway dump \
            --yes \
            --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
            --konnect-token="${{ steps.import-token.outputs.SYSTEM_ACCOUNT_TOKEN }}" \
            --konnect-control-plane-name="${{ inputs.control_plane_name }}" -o kong_backup.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Diff Kong Gateway configuration
        run: |
          deck gateway diff kong.yaml  \
            --select-tag $DECK_API_NAME \
            --select-tag $DECK_API_MAJOR_VERSION \
            --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
            --konnect-token="${{ steps.import-token.outputs.SYSTEM_ACCOUNT_TOKEN }}" \
            --konnect-control-plane-name="${{ inputs.control_plane_name }}" > kong_diff.txt
        working-directory: ${{ env.BUILD_FOLDER }}
    

      - name: Sync Kong Gateway configuration
        run: |
          deck gateway sync kong.yaml  \
            --select-tag $DECK_API_NAME \
            --select-tag $DECK_API_MAJOR_VERSION \
            --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
            --konnect-token="${{ steps.import-token.outputs.SYSTEM_ACCOUNT_TOKEN }}" \
            --konnect-control-plane-name="${{ inputs.control_plane_name }}"
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Run Contract Tests
        uses: schemathesis/action@v1
        id: tests
        with:
          schema: ${{ env.API_SPEC}}
          base-url: 'http://k8s.orb.local/flight-data'
          checks: not_a_server_error,response_headers_conformance,response_schema_conformance,negative_data_rejection,ignored_auth
        continue-on-error: true

      - name: Rollback configuration
        if: steps.tests.outcome == 'failure'
        run: |
          echo "Tests failed. Rolling back configuration..."
          deck gateway sync kong_backup.yaml  \
            --select-tag $DECK_API_NAME \
            --select-tag $DECK_API_MAJOR_VERSION \
            --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
            --konnect-token="${{ steps.import-token.outputs.SYSTEM_ACCOUNT_TOKEN }}" \
            --konnect-control-plane-name="${{ inputs.control_plane_name }}"
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Get a new backup of the current Kong Gateway configuration
        if: steps.tests.outcome == 'success'
        run: |
          deck gateway dump \
            --yes \
            --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
            --konnect-token="${{ steps.import-token.outputs.SYSTEM_ACCOUNT_TOKEN }}" \
            --konnect-control-plane-name="${{ inputs.control_plane_name }}" -o kong_backup.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            ${{ env.BUILD_FOLDER }}/kong_backup.yaml
            ${{ env.BUILD_FOLDER }}/kong_diff.txt
