name: Provision Konnect (Old)

on:
  workflow_dispatch:
    inputs:
      config:
        description: 'Path to the provisioning config file'
        type: string
        required: true
      action:
        description: 'Action to perform'
        required: true
        type: choice
        default: 'provision'
        options:
          - 'provision'
          - 'destroy'
      environment:
        description: 'Environment to provision'
        type: choice
        default: 'dev'
        options:
          - 'dev'
          - 'tst'
          - 'acc'
          - 'prd'

jobs:
  provision-konnect:
    runs-on: ubuntu-latest

    env:
      ENV_FILE: .github/env/${{ inputs.environment }}.yaml
      TF_VAR_resources_file: ${{ github.workspace }}/${{ inputs.config }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load environment configuration
        uses: ./.github/actions/load-config
        with:
          environment: ${{ inputs.environment }}
        env:
          KONNECT_PAT: ${{ secrets.KONNECT_PAT }}

      - name: Install MinIO Client
        uses: ./.github/actions/setup-minio-client

      - uses: eLco/setup-vault@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 'latest'

      - name: Validate config
        run: |
          # Check if the config file exists
          if [ ! -f ${{ inputs.config }} ]; then
            echo "Config file not found: ${{ inputs.config }}"
            exit 1
          fi
        shell: bash

      - name: Load environment configuration
        uses: ./.github/actions/load-config
        with:
          environment: ${{ inputs.environment }}
        env:
          KONNECT_PAT: ${{ secrets.KONNECT_PAT }}

      - name: Set resource variables from configuration file
        run: |
          RESOURCE_TYPE=$(jq -r '.metadata.type' ${{ github.workspace }}/${{ inputs.config }})
          RESOURCE_NAME=$(jq -r '.metadata.name' ${{ github.workspace }}/${{ inputs.config }})
          RESOURCE_PATH=$(echo $RESOURCE_TYPE | tr '.' '/')
          TERRAFORM_DIR=${{ github.workspace }}/terraform/${RESOURCE_PATH}

          echo "RESOURCE_TYPE=$RESOURCE_TYPE" >> $GITHUB_ENV
          echo "RESOURCE_NAME=$RESOURCE_NAME" >> $GITHUB_ENV
          echo "TERRAFORM_DIR=$TERRAFORM_DIR" >> $GITHUB_ENV
        shell: bash
      
      - name: Import CA Certificate
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ env.VAULT_ADDR }}
          token: ${{ env.VAULT_TOKEN }}
          secrets: |
            pki/cert/ca certificate | TF_VAR_cacert ;

      - name: Create S3 bucket if required
        if: ${{ inputs.action == 'provision' }}
        run: |
          ./create-minio-bucket.sh konnect $RESOURCE_TYPE.$RESOURCE_NAME
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
        working-directory: scripts

      - name: Terraform Init
        run: |
          terraform init -upgrade \
            -backend-config=config.s3.tfbackend \
            -backend-config="bucket=$RESOURCE_TYPE.$RESOURCE_NAME" \
            -backend-config="key=tfstate" \
            -backend-config="region=main" \
            -backend-config="access_key=${{ secrets.S3_ACCESS_KEY }}" \
            -backend-config="secret_key=${{ secrets.S3_SECRET_KEY }}" 
        working-directory: ${{env.TERRAFORM_DIR}}

      - name: Terraform Plan
        if: ${{ inputs.action == 'provision' }}
        run: |
          terraform plan -out=tfplan
        working-directory: ${{env.TERRAFORM_DIR}}

      - name: Terraform Apply
        if: ${{ inputs.action == 'provision' }}
        id: tfapply
        run: |
          terraform apply -auto-approve tfplan
          echo "$(terraform-bin output -json system_account_access_tokens)" > system_account_tokens.json
        working-directory: ${{env.TERRAFORM_DIR}}

      - name: Store System Account tokens in Vault
        if: ${{ inputs.action == 'provision' }}
        run: |
          for row in $(cat system_account_tokens.json | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }

            secret_name=$(_jq '.name')
            secret_value=$(_jq '.token')

            vault kv put secret/system-accounts/${secret_name} token=${secret_value}

            echo "Stored secret ${secret_name} in Vault."
          done
        working-directory: ${{env.TERRAFORM_DIR}}
      
      - name: Terraform destroy
        if: ${{ inputs.action == 'destroy' }}
        run: |
          terraform destroy -auto-approve
        working-directory: ${{env.TERRAFORM_DIR}}