name: Publish API Product

on:
  workflow_call:
    inputs:
      api_dir:
        description: "Directory containing the API Product resources"
        required: true
        type: string
      environment:
        description: 'Environment to provision'
        type: string
        required: true
      konnect_region:
        description: 'Konnect region where the API Product will be published'
        type: string
        required: true
        default: 'eu'
      konnect_control_plane_id:
        description: 'Konnect Control Plane ID'
        type: string
        required: true
      konnect_gateway_service_id:
        description: 'Konnect Gateway Service ID'
        type: string
        required: true
      gateway_base_url:
        description: 'Gateway base URL'
        type: string
        required: true
        default: 'http://localhost:8000'
      action: 
        description: 'Action to perform'
        type: string
        required: true
        default: 'publish' # Options: publish, destroy
      
jobs:
  publish-api-product:
    runs-on: ubuntu-latest

    env:
      TF_VAR_konnect_personal_access_token: ${{ secrets.KONNECT_PAT }}
      TF_VAR_environment: ${{ inputs.environment }}
      TF_VAR_konnect_server_url: https://${{ inputs.konnect_region }}.api.konghq.com
      TF_VAR_konnect_control_plane_id: ${{ inputs.konnect_control_plane_id }}
      TF_VAR_konnect_gateway_service_id: ${{ inputs.konnect_gateway_service_id }}
      TERRAFORM_DIR: ${{ github.workspace }}/terraform/environments/${{ inputs.environment }}/api_product

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 'latest'

      - name: Setup tfvars
        id: tfvars
        run: |

          # Determine api name, version, description from openapi spec and set as terraform vars
          api_name=$(yq eval '.info.title' ${{ github.workspace }}/${{ inputs.api_dir }}/oas.yaml)
          api_version=$(yq eval '.info.version' ${{ github.workspace }}/${{ inputs.api_dir }}/oas.yaml)
          api_description=$(yq eval '.info.description' ${{ github.workspace }}/${{ inputs.api_dir }}/oas.yaml)
          product_name=$(echo $api_name | tr '[:upper:]' '[:lower:]' | tr ' ' '-')product
          
          # echo "TF_VAR_api_name=$api_name" >> $GITHUB_ENV
          # echo "TF_VAR_api_version=$api_version" >> $GITHUB_ENV
          # echo "TF_VAR_api_description=$api_description" >> $GITHUB_ENV
          # echo "TF_VAR_product_name=$product_name" >> $GITHUB_ENV

          echo "::set-output name=api_name::$api_name"
          echo "::set-output name=api_version::$api_version"
          echo "::set-output name=api_description::$api_description"
          
          # Plan ID will be the product name. 
          # We will use this to create a unique S3 bucket for storing tfstate for the specific product.
          echo "::set-output name=planid::$product_name"

      - name: Create S3 bucket if not exists
        run: |
          ./create-minio-bucket.sh ${{ steps.tfvars.outputs.planid }} ${{ steps.tfvars.outputs.planid }}.tfstate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
        working-directory: scripts

      - name: Copy spec and docs to terraform dir
        run: |
          cp ${{ github.workspace }}/${{ inputs.api_dir }}/oas.yaml ${{env.TERRAFORM_DIR}}/openapi_spec.yaml
          cp -r ${{ github.workspace }}/${{ inputs.api_dir }}/docs ${{env.TERRAFORM_DIR}}/docs
        working-directory: ${{env.TERRAFORM_DIR}}

      - name: Remove internal servers from openapi spec
        run: |
          yq e -i 'del(.servers[] | select(.x-internal == true))' openapi_spec.yaml
          cat openapi_spec.yaml

        working-directory: ${{env.TERRAFORM_DIR}}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config=config.s3.tfbackend \
            -backend-config="bucket=${{ steps.tfvars.outputs.planid }}.tfstate" \
            -backend-config="key=${{ inputs.environment }}.tfstate" \
            -backend-config="region=main" \
            -backend-config="access_key=${{ secrets.S3_ACCESS_KEY }}" \
            -backend-config="secret_key=${{ secrets.S3_SECRET_KEY }}"
        working-directory: ${{env.TERRAFORM_DIR}}

      - name: Terraform Plan
        if: ${{ inputs.action == 'publish' }}
        run: |
          terraform plan -out=tfplan
        working-directory: ${{env.TERRAFORM_DIR}}
        env:
          TF_VAR_api_name: ${{ steps.tfvars.outputs.api_name }}
          TF_VAR_api_version: ${{ steps.tfvars.outputs.api_version }}
          TF_VAR_api_description: ${{ steps.tfvars.outputs.api_description }}
          TF_VAR_product_name: ${{ steps.tfvars.outputs.product_name }}

      - name: Terraform Apply
        if: ${{ inputs.action == 'publish' }}
        id: tfapply
        run: |
          terraform apply -auto-approve tfplan
        working-directory: ${{env.TERRAFORM_DIR}}
        env:
          TF_VAR_api_name: ${{ steps.tfvars.outputs.api_name }}
          TF_VAR_api_version: ${{ steps.tfvars.outputs.api_version }}
          TF_VAR_api_description: ${{ steps.tfvars.outputs.api_description }}
          TF_VAR_product_name: ${{ steps.tfvars.outputs.product_name }}

      - name: Terraform destroy
        if: ${{ inputs.action == 'destroy' }}
        run: |
          terraform destroy -auto-approve
        working-directory: ${{env.TERRAFORM_DIR}}